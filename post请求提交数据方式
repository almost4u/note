#### Http请求格式：
```
<method> <request-URL> <version>
<headers>
<entity-body>
```
协议规定POST提交的请求必须放在消息主体entity-body中，但是没说数据必须用什么编码，但是要服务器能成功解析才行。服务器通常是根据请求头headers 中的Content-Type 字段来获悉请求中消息主题是什么方式编码的，再对主题进行解析。
所以从Content-Type和entity-body来分析POST请求。

* application/x-www-form-urlencoded
浏览器的原声form表单，如果不设置enctype属性，默认是这种方式提交数据。
```
POST http://www.example.com HTTP/1.1
Content-Type:application/x-www-form-urlencode;charset=utf-8
title=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3
```
提交的数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持，例如Spring Controller中可以通过@RequestParam("key") String key来获取entity-body中的参数。

* multipart/form-data
使用表单上传文件时，必须让form的encrypte等于这个值。
```
POST http://www.example.com HTTP/1.1
Content-Type:multipart/form-data; boundary=WebKitFormBoundaryrGKCBY7qhFd3TrwA
--WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name="text"
title
--WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name="file"; filename="chrome.png"
Content-Type: image/png
PNG ... content of chrome.png ...
--WebKitFormBoundaryrGKCBY7qhFd3TrwA--
```
boundary是分隔符，body由多个部分组成，用boundary分隔，分隔的时候boundary前面要加--，结束的时候在boundary后面要加--。

* application/json
用来告诉服务端消息主体是序列化后的 JSON 字符串。
```
POST http://www.example.com HTTP/1.1
Content-Type: application/json;charset=utf-8
{"title":"test","sub":[1,2,3]}
```
* text/xml
```
POST http://www.example.com HTTP/1.1
Content-Type: text/xml
<?xml version="1.0"?>
<methodCall>
    <methodName>examples.getStateName</methodName>
    <params>
        <param>
            <value><i4>41</i4></value>
        </param>
    </params>
</methodCall>
```

